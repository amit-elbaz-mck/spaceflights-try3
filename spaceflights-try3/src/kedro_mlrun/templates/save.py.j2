# (c) McKinsey & Company 2016 – Present
# All rights reserved
#
#
# This material is intended solely for your internal use and may not be reproduced,
# disclosed or distributed without McKinsey & Company's express prior written consent.
# Except as otherwise stated, the Deliverables are provided ‘as is’, without any express
# or implied warranty, and McKinsey shall not be obligated to maintain, support, host,
# update, or correct the Deliverables. Client guarantees that McKinsey’s use of
# information provided by Client as authorised herein will not violate any law
# or contractual right of a third party. Client is responsible for the operation
# and security of its operating environment. Client is responsible for performing final
# testing (including security testing and assessment) of the code, model validation,
# and final implementation of any model in a production environment. McKinsey is not
# liable for modifications made to Deliverables by anyone other than McKinsey
# personnel, (ii) for use of any Deliverables in a live production environment or
# (iii) for use of the Deliverables by third parties; or
# (iv) the use of the Deliverables for a purpose other than the intended use
# case covered by the agreement with the Client.
# Client warrants that it will not use the Deliverables in a "closed-loop" system,
# including where no Client employee or agent is materially involved in implementing
# the Deliverables and/or insights derived from the Deliverables.
import os
import re
from pathlib import Path

import mlrun
from git import InvalidGitRepositoryError, Repo
from kedro.framework.startup import bootstrap_project
from mlrun.projects import MlrunProject

kedro_metadata = bootstrap_project(Path(__file__).parent.parent)

mlrun.set_env_from_file(str(kedro_metadata.project_path / ".mlrun" / "mlrun.env"))
project: MlrunProject = mlrun.get_or_create_project(
    name=re.sub(r"[^-a-z0-9]", "", kedro_metadata.project_name.lower()),
    context="./",
    user_project=True,
)

try:
    repo = Repo(".", search_parent_directories=True)
except InvalidGitRepositoryError as e:
    raise FileNotFoundError(
        "kedro-mlrun must be executed within a git repository."
    ) from e

remotes = repo.remotes
if len(remotes) == 0:
    raise ValueError(
        "The git repository does not have any remotes configured. "
        "It must have at least one"
    )
elif len(remotes) > 1:
    print(
        "The git repository has multiple remotes configured. "
        f"The first one will be used: {remotes[0].url}"
    )

source = remotes[0].url
if source.startswith("https://"):
    # mlrun only recognizes git://
    source = source.replace("https://", "git://")
elif "@" in source:
    # assuming ssh-style url
    _user, uri = source.split("@")
    uri = uri.replace(":", "/")
    source = f"git://{uri}"

project.set_source(f"{source}#{repo.active_branch.name}", pull_at_runtime=True)
project.set_secrets({"GIT_TOKEN": os.getenv("GIT_TOKEN")})

handlers_fn = project.set_function(
    func=".mlrun/kedro_handler.py",
    name="kedro_handler",
    kind="job",
    image="mlrun/mlrun:1.4.0",
    with_repo=True,
    requirements="src/requirements.txt",
)
project.build_function(handlers_fn)
project.set_workflow("main", ".mlrun/workflow.py")
project.save()
